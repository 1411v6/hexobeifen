<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2019/12/25/javascript-xue-xi-bi-ji/"/>
      <url>/2019/12/25/javascript-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="作用分区"><a href="#作用分区" class="headerlink" title="作用分区:"></a>作用分区:</h2><pre><code>Html:呈现网页的内容  --相当于定义一个人(有鼻子有眼)Css:用于设置网页的样式  --相当于进行化妆</code></pre><hr><h2 id="JS作用"><a href="#JS作用" class="headerlink" title="JS作用:"></a>JS作用:</h2><table><thead><tr><th align="center">JS作用</th></tr></thead><tbody><tr><td align="center">/<em>…</em>/:用于注释说明</td></tr><tr><td align="center">1.用于校检用户输入的表单数据</td></tr><tr><td align="center">2.用于与用户进行交互提示</td></tr><tr><td align="center">3.Ajax异步加载技术</td></tr><tr><td align="center">4.实现瀑布流,无需刷新,加载数据</td></tr></tbody></table><hr><h2 id="Html中使用JS的方法"><a href="#Html中使用JS的方法" class="headerlink" title="Html中使用JS的方法:"></a>Html中使用JS的方法:</h2><pre><code>1.直接在head标签中定义Script标签来定义JS例:&lt;script&gt;    alert('今天是你学习JS的第一天')&lt;/script&gt;2.可以在Html标签中直接使用JS事件属性设置JS例:① body里面给一个div&lt;div id="red"&gt;&lt;/div&gt;② 给div里一个点击事件&lt;div id="red" onclick="alert('别瞎点')"&gt;&lt;/div&gt;3.使用Script标签引入外部的JS文件① 新建一个.JS文件② 在任意一个位置引入&lt;script src="./memeda.js"&gt;&lt;/script&gt;4.在超链接href属性中使用javascript标识符定义JS5.&lt;a href="javascript:alert('清除缓存成功')"&gt;&lt;/a&gt;</code></pre><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释:"></a>注释:</h2><pre><code>单行注释: //多行注释: /**/文档注释:/**  */注:文档注释多用于函数以及对象或者文件功能的说明</code></pre><hr><h2 id="指令分隔符"><a href="#指令分隔符" class="headerlink" title="指令分隔符:"></a>指令分隔符:</h2><pre><code>定义:用于标志我们所写代码的结束1.使用分号作为指令分隔符例:alert('测试');2.使用换行符作为指令分隔符.</code></pre><hr><h2 id="JS的内容"><a href="#JS的内容" class="headerlink" title="JS的内容:"></a>JS的内容:</h2><pre><code>客户端浏览的JS;1.ECMAScript的核心语法结构(如何使用JS,如何定义JS的变量);2.包含Dom对象;3.包含Bom对象.</code></pre><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量:"></a>变量:</h2><pre><code>var uname = '孙悟空'; uname为变量名,整句意思为把孙悟空这个值赋给uname这个变量;console.log(变量名);  打印变量</code></pre><hr><h3 id="常用的变量类型"><a href="#常用的变量类型" class="headerlink" title="常用的变量类型:"></a>常用的变量类型:</h3><table><thead><tr><th align="center">常用变量类型</th></tr></thead><tbody><tr><td align="center">typeof:显示变量类型</td></tr><tr><td align="center">Number:数值类型</td></tr><tr><td align="center">Boolean:布尔类型</td></tr><tr><td align="center">String:字符串类型</td></tr><tr><td align="center">Function:函数类型</td></tr><tr><td align="center">Object:对象类型</td></tr><tr><td align="center">Undefined:未定义</td></tr></tbody></table><hr><pre><code>例:var num = 100;  //定义一个数值类型变量console.log(typeof num);  //打印num变量的类型</code></pre><hr><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则:"></a>变量命名规则:</h3><pre><code>首字符必须是英文字母,下划线,$;后跟任意长度的数字,字母,下划线,$;严格区分大小写;不允许使用JS的关键字和保留字;命名尽量有意义.驼峰命名法:变量名如果是由多个单词组成,第一个单词的首字母小写,其他单词的首字母进行大写;例:var className = "一班";</code></pre><hr><h2 id="进制"><a href="#进制" class="headerlink" title="进制:"></a>进制:</h2><pre><code>在JS中无论以任何进制声明的数值类型变量,进行输出时,都是十进制.</code></pre><table><thead><tr><th align="center">常用变量类型</th><th align="center">组成</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">十进制</td><td align="center">0 1 2 3 4 5 6 7 8 9</td><td align="center">逢十进一</td></tr><tr><td align="center">二进制</td><td align="center">0 1</td><td align="center">逢二进一</td></tr><tr><td align="center">八进制</td><td align="center">0 1 2 3 4 5 6 7</td><td align="center">逢八进一</td></tr><tr><td align="center">十六进制</td><td align="center">0 1 2 3 4 5 6 7 8 9 a b c d e f</td><td align="center">逢十六进一</td></tr></tbody></table><hr><pre><code>二进制:0b开头二进制转十进制:从右到左,依次乘2的幂数,进行累加.例:0b10 --&gt; 0*2(上标0)+1*2(上标1)=0+2=20b110 --&gt; 0*2(上标0)+1*2(上标1)+1*2(上标2)=0+2+4=6八进制:0开头例:010 --&gt; 0*8(上标0)+1*8(上标1)=0+8=8十六进制:0x开头例:0x10 --&gt; 0*16(上标0)+1*16(上标1)=0+16=16</code></pre><hr><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符:"></a>比较运算符:</h2><pre><code>NaN:特点:NaN与任何一个数进行运算返回的结果都是NaN.NaN不与任何一个数相等.Number:包含了数值类型对象的相关信息.Boolean:布尔值表示真假.true:真;false:假;例:var bool = true;</code></pre><hr><h2 id="其他类型变量"><a href="#其他类型变量" class="headerlink" title="其他类型变量:"></a>其他类型变量:</h2><pre><code>使用function关键字定义函数.例:function makeBaby(){    console.log('...');}</code></pre><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串:"></a>字符串:</h3><pre><code>var str = '';</code></pre><hr><h3 id="对象"><a href="#对象" class="headerlink" title="对象:"></a>对象:</h3><pre><code>object例:var obj = new Object();</code></pre><hr><h3 id="未定义"><a href="#未定义" class="headerlink" title="未定义"></a>未定义</h3><pre><code>undefined</code></pre><hr><h2 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h2><table><thead><tr><th align="center">变量类型转换</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">强制类型转换</td><td align="center">调用特定的函数为类型</td></tr><tr><td align="center">自动类型转换</td><td align="center">根据程序执行的环境发生自动类型转换,某个瞬间充当了某种类型,但是本身变量的类型是没有发生变化的</td></tr></tbody></table><hr><pre><code>强制类型转换:1.其他类型变量转为数值类型;任何一个数对n进行求余操作,结果有n种,最小值为0,最大值为n-1.</code></pre><hr><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级:"></a>运算符的优先级:</h2><pre><code>var a = 3;var c = a++ + ++aconsole.log(a);console.log(c);c = 3 + 4 --&gt; 7</code></pre><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接:"></a>链接:</h2><pre><code>var a = 100 + 100 + '100';console.log(a); --&gt; 200100console.log(typeof a); --&gt; string</code></pre><hr><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><pre><code>var a = 3;var b = 4;if((a = 4) || (b = 5)){    a++;    b++;}console.log(a); --&gt; 5console.log(b); --&gt; 5</code></pre><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>函数的组成:函数名+函数体</code></pre><h3 id="函数的结构"><a href="#函数的结构" class="headerlink" title="函数的结构"></a>函数的结构</h3><pre><code>function 函数体(){    //函数体}</code></pre><hr><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用:"></a>函数的调用:</h3><pre><code>函数名();</code></pre><hr><h3 id="函数的命名规范"><a href="#函数的命名规范" class="headerlink" title="函数的命名规范:"></a>函数的命名规范:</h3><table><thead><tr><th align="center">函数的命名规范</th></tr></thead><tbody><tr><td align="center">1.首字符必须是字母,下划线,或是$;</td></tr><tr><td align="center">2.后跟任意长度的数字,字母,下划线,$;</td></tr><tr><td align="center">3.严格区分大小写;</td></tr><tr><td align="center">4.不能使用系统的关键字和保留字;</td></tr><tr><td align="center">5.命名尽量有意义;</td></tr><tr><td align="center">6.使用驼峰命名法</td></tr></tbody></table><hr><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre><code>将匿名函数赋值给变量例:var memeda = function(){    console.log('...');}console.log(memeda);</code></pre><pre><code>使用new function 构造函数定义函数.</code></pre><hr><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链:"></a>作用域链:</h2><pre><code>函数内部变量在进行查询时,遵守的规则:1.首先从函数自身所在的作用域进行查找;2.如果没有向父级或者是先辈作用域进行查找;3.如果没有最终的就是undefined.</code></pre><hr><h2 id="局部变量影响全部变量的方式"><a href="#局部变量影响全部变量的方式" class="headerlink" title="局部变量影响全部变量的方式:"></a>局部变量影响全部变量的方式:</h2><pre><code>1.在函数的内部不使用var关键字定义变量;(此时变量为全局变量);2.使用return关键字将局部变量的值返回到函数的外部使用对应的变量进行接收.</code></pre><hr><h2 id="函数类型划分"><a href="#函数类型划分" class="headerlink" title="函数类型划分:"></a>函数类型划分:</h2><pre><code>1.有参数的函数,无参数的函数;2.匿名函数,回调函数,立即执行函数;3.闭包函数,递归函数.</code></pre><hr><h2 id="循环使用场景"><a href="#循环使用场景" class="headerlink" title="循环使用场景:"></a>循环使用场景:</h2><pre><code>for:适合遍历数组,字符串等;for in:适合遍历对象;while:与for使用场景差不多,唯一不同的是遍历的条件必须满足;do while:至少执行一遍的循环,遍历数组和字符串也是很方便.</code></pre><hr><h2 id="undefined不是Null"><a href="#undefined不是Null" class="headerlink" title="undefined不是Null"></a>undefined不是Null</h2><pre><code>在Javascript中,Null用于对象,Undefined用于变量,属性和方法;对象只有被定义才有可能为Null,否则为Undefined.</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScriptES6语法学习笔记</title>
      <link href="/2019/12/25/javascriptes6-yu-fa-xue-xi-bi-ji/"/>
      <url>/2019/12/25/javascriptes6-yu-fa-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScriptES6"><a href="#JavaScriptES6" class="headerlink" title="JavaScriptES6"></a>JavaScriptES6</h1><h2 id="ES6箭头函数"><a href="#ES6箭头函数" class="headerlink" title="ES6箭头函数:"></a>ES6箭头函数:</h2><pre><code>例:let fn = val =&gt; val;此语法等同于:let fn = function(val){    return val;}</code></pre><pre><code>箭头函数:* 简化函数的声明;* 参数超过1个时必须加();* 函数体超过1行时,必须加{},并自己写return.</code></pre><pre><code>箭头函数的作用:* 简化回调函数;* 箭头函数中的this是函数声明时所在的对象.</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记</title>
      <link href="/2019/12/25/c-yu-yan-xue-xi-bi-ji/"/>
      <url>/2019/12/25/c-yu-yan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><pre><code>C语言是一种通用的,面向过程式的计算机程序设计语言,1972年,为了移植于开发UNIX操作系统,丹尼斯里奇在贝尔电话实验室设计开发了C语言.</code></pre><hr><h2 id="涵义"><a href="#涵义" class="headerlink" title="涵义:"></a>涵义:</h2><table><thead><tr><th align="center">涵义</th></tr></thead><tbody><tr><td align="center">/<em>…</em>/:用于注释说明</td></tr><tr><td align="center">printf():用于格式化输出到屏幕,printf()函数在’stdio.h’头文件中声明</td></tr><tr><td align="center">stdio.h:头文件(标准输入输出头文件),#include是一个预处理命令,用来引入头文件,当编译器遇到printf()函数时,如果没有找到stdio.h头文件,会发生编译错误</td></tr><tr><td align="center">return 0:语句用于表示退出程序</td></tr><tr><td align="center">int:标识符,定义整数型</td></tr><tr><td align="center">main:C语言入口函数</td></tr></tbody></table><hr><h2 id="a-和-a区别"><a href="#a-和-a区别" class="headerlink" title="a++和++a区别:"></a>a++和++a区别:</h2><table><thead><tr><th align="center">a++</th><th align="center">++a</th></tr></thead><tbody><tr><td align="center">a = 10 c = a++ 结果为c=10;a=11,此为先赋值后运算</td><td align="center">a = 10 c = ++a 结果为c=11;a=10,此为先运算后赋值</td></tr></tbody></table><hr><h2 id="C语言关键字"><a href="#C语言关键字" class="headerlink" title="C语言关键字:"></a>C语言关键字:</h2><table><thead><tr><th align="center">C语言关键字</th><th align="center">C语言关键字</th><th align="center">C语言关键字</th></tr></thead><tbody><tr><td align="center">auto:声明自动变量</td><td align="center">break:跳出当前循环,一般与switch连用</td><td align="center">case:开关语句分支.与switch连用</td></tr><tr><td align="center">char:声明字符型变量或函数返回值类型</td><td align="center">const:声明只读变量</td><td align="center">continue:结束当前循环,开始下一轮循环</td></tr><tr><td align="center">default:开关语句中的’其他分支’,一般与switch连用,用于描述其他情况</td><td align="center">do:循环语句的循环体</td><td align="center">double:声明双精度浮点型变量或函数返回值类型</td></tr><tr><td align="center">else:条件语句否定分支(与if连用)</td><td align="center">enum:声明枚举变量</td><td align="center">extern:声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td align="center">float:声明浮点型变量或函数返回值类型</td><td align="center">for:一种循环语句</td><td align="center">goto:无条件跳转语句</td></tr><tr><td align="center">if:条件语句</td><td align="center">int:声明整型变量或函数</td><td align="center">long:声明长整型变量或函数返回值类型</td></tr><tr><td align="center">register:声明寄存器变量</td><td align="center">return:子程序返回语句(可以带参数,也可以不带参数)</td><td align="center">short:声明短整型变量或函数</td></tr><tr><td align="center">signed:声明有符号类型或变量长度</td><td align="center">static:声明静态变量</td><td align="center">struct:声明结构体类型</td></tr><tr><td align="center">switch:用于开关语句(与case连用)</td><td align="center">typedef:用以给数据类型取别名</td><td align="center">unsigned:声明无符号类型变量或函数</td></tr><tr><td align="center">union:声明共用体类型</td><td align="center">void:声明函数无返回值或无参数,声明无类型指针</td><td align="center">while:循环语句的循环条件</td></tr></tbody></table><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1.基本类型:</td><td align="center">它们是算数类型,包括两种类型:整数类型和浮点类型</td></tr><tr><td align="center">2.枚举类型:</td><td align="center">它们也是算数类型,是被用来定义在程序中只能赋予其一定的离散整数值的变量</td></tr><tr><td align="center">3.void类型:</td><td align="center">类型说明符,void表明没有可用的值</td></tr><tr><td align="center">4.派生类型:</td><td align="center">它们包括:指针类型,数组类型,结构类型,共用体类型和函数类型</td></tr></tbody></table><hr><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th align="center">类型</th><th align="center">存储大小</th><th align="center">值范围</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1字节</td><td align="center">-128到127或0到255</td></tr><tr><td align="center">unsigned char</td><td align="center">1字节</td><td align="center">0到255</td></tr><tr><td align="center">signed char</td><td align="center">1字节</td><td align="center">-128到127</td></tr><tr><td align="center">int</td><td align="center">2到4字节</td><td align="center">-32,768到32,768或-2,147,483,648到2,147,483,647</td></tr><tr><td align="center">unsogned int</td><td align="center">2到4字节</td><td align="center">0到65,535或0到4,294,967,295</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32,768到32,767</td></tr><tr><td align="center">unsigned short</td><td align="center">2字节</td><td align="center">0到65,535</td></tr><tr><td align="center">long</td><td align="center">4字节</td><td align="center">-2,147,483,648到2,147,483,647</td></tr><tr><td align="center">unsigned long</td><td align="center">4字节</td><td align="center">0到4,294,967,295</td></tr></tbody></table><hr><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th align="center">类型</th><th align="center">存储大小</th><th align="center">值范围</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">1.2E-38到3.4E+38</td><td align="center">6位小数</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">2.3E-308到1.7E+308</td><td align="center">15位小数</td></tr><tr><td align="center">long double</td><td align="center">16字节</td><td align="center">3.4E-4932到1.1E+4932</td><td align="center">19位小数</td></tr></tbody></table><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><pre><code>void类型指定没有可用的值1.函数返回为空C语言有各种函数都不返回值,或者您可以说它们返回为空,不返回值的函数的返回类型为空,例如:void exit(in status);2.函数参数为空C语言中有各种函数不接受任何参数,不带参数的函数可以接收一个void,例如:int rand(void);3.指针指向void类型为void\*的指针代表对象的地址,而不是类型,例如,内存分配函数void\* malloc(size-t size);返回指向void的指针,可以转换为任何数据类型</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">通常是一个字节(八位),这是一个整数类型</td></tr><tr><td align="center">int</td><td align="center">对机器而言,整数的最自然的大小</td></tr><tr><td align="center">float</td><td align="center">单精度浮点值.格式:1位符号,8位指数,23位小数</td></tr><tr><td align="center">double</td><td align="center">双精度浮点值.格式:1位符号,11位指数,52位小数</td></tr><tr><td align="center">void</td><td align="center">表示类型的缺失</td></tr></tbody></table><hr><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><pre><code>1.一种是需要建立存储空间的,例:int a 在声明时就已经建立了存储空间.2.不需要建立存储空间的,通过使用extern关键字声明变量名而不是定义它.注:除非有extern关键字,否则都是变量的定义,extern int 1; //声明,而不是定义;int i; //声明,也是定义</code></pre><hr><h3 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h3><table><thead><tr><th align="center">左值</th><th align="center">右值</th></tr></thead><tbody><tr><td align="center">指向内存位置的表达式被成为左值表达式,左值可以出现在赋值号的左边或右边</td><td align="center">术语右值指的是存储在内存中某些地址的数值,右值是不能对其进行赋值的表达式,也就是说,右值可以出现在赋值号的右边,但不能出现在赋值号的左边</td></tr></tbody></table><pre><code>注:变量是左值,因此可以出现在赋值号的左边,数值型的字面值是右值,因此不能被赋值,不能出现在赋值号的左边例:int g = 20; //此表达式对,成立.10 = 20; //此表达式为错,不成立.</code></pre><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><pre><code>常量是固定值,在程序执行期间不会改变;常量可以是任何的基础数据类型,比如整数常量,浮点常量字符常量或字符串字面值,也有枚举常量;常量就像是常规的变量,只不过常量的值在定以后不能修改.</code></pre><p>例:</p><table><thead><tr><th align="center">常量</th></tr></thead><tbody><tr><td align="center">85 十进制</td></tr><tr><td align="center">0213 八进制</td></tr><tr><td align="center">0x4b 十六进制</td></tr><tr><td align="center">30 整数</td></tr><tr><td align="center">30u 无符号整数</td></tr><tr><td align="center">30l 长整数</td></tr><tr><td align="center">30ul 无符号长整数</td></tr></tbody></table><hr><h3 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h3><pre><code>由整数部分,小数点,小数部分和指数部分组成.例:3.14159</code></pre><hr><h3 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h3><pre><code>字符常量括在单引号中;例:'x'可以存储在char类型的简单变量中例:printf("%d\n",x)</code></pre><hr><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><table><thead><tr><th align="center">转义序列</th><th align="center">含义</th><th align="center">转义序列</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">\字符</td><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">'</td><td align="center">‘字符</td><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">"</td><td align="center">“字符</td><td align="center">\t</td><td align="center">水平制表符</td></tr><tr><td align="center">?</td><td align="center">?字符</td><td align="center">\v</td><td align="center">垂直制表符</td></tr><tr><td align="center">\a</td><td align="center">警报铃声</td><td align="center">\ooo</td><td align="center">一到三位的八进制数</td></tr><tr><td align="center">\b</td><td align="center">退格键</td><td align="center">\f</td><td align="center">换页符</td></tr></tbody></table><hr><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><pre><code>字符串字面值或常量是括在双引号中的,一个字符串包含类似于字符常量的字符,普通的字符,转义序列和通用的字符.你可以使用空格做分隔符,把一个很长的字符串常量进行分行.例:"Hello,World""Hello,\ dear""Hello,""d""ear"</code></pre><hr><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><pre><code>1.使用#define预处理器2.使用const关键字例:#define LENGTH 10 //定义一个常量,把10赋值给常量const type variable = value;</code></pre><hr><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">两个数相加</td><td align="center">A+B将得到30</td></tr><tr><td align="center">-</td><td align="center">从第一个操作数中减去第二个操作数</td><td align="center">A-B将得到-10</td></tr><tr><td align="center">*</td><td align="center">两个操作数相乘</td><td align="center">A*B将得到200</td></tr><tr><td align="center">/</td><td align="center">分子除以分母</td><td align="center">B/A将得到2</td></tr><tr><td align="center">%</td><td align="center">取模运算符,整除后的余数</td><td align="center">B%A将得到0</td></tr><tr><td align="center">++</td><td align="center">自增运算符,整数值增加1</td><td align="center">A++将得到11</td></tr><tr><td align="center">–</td><td align="center">自减运算符,整数值减少1</td><td align="center">A–将得到9</td></tr></tbody></table><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">检查两个操作数的值是否相等,如相等则条件为真</td><td align="center">(A==B)为假</td></tr><tr><td align="center">!=</td><td align="center">检查两个操作数的值是否相等,如不相等则条件为真</td><td align="center">(A!=B)为真</td></tr><tr><td align="center">&gt;</td><td align="center">检查左操作数的值是否大于右操作数的值,如果是则条件为真</td><td align="center">(A&gt;B为假)</td></tr><tr><td align="center">&lt;</td><td align="center">检查左操作数的值是否小于右操作数的值,如果是则条件为真</td><td align="center">(A&lt;B为真)</td></tr><tr><td align="center">&gt;=</td><td align="center">检查左操作数的值是否大于或等于右操作数的值,如果是则条件为真</td><td align="center">(A&gt;=B为假)</td></tr><tr><td align="center">&lt;=</td><td align="center">检查左操作数的值是否小于或等于右操作数的值,如果是则条件为真</td><td align="center">(A&lt;=B为真)</td></tr></tbody></table><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与运算符,如果两个操作数非零,则条件为真</td><td align="center">(A&amp;&amp;B)为假</td></tr><tr><td align="center">||</td><td align="center">逻辑或运算符,如果两个操作数中有任意一个非零,则条件为真</td><td align="center">(A||B)为真</td></tr><tr><td align="center">!</td><td align="center">逻辑非运算符,用来逆转操作数的逻辑状态</td><td align="center">如果条件为真,则逻辑非运算符将使其为假</td></tr></tbody></table><hr><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">把右边操作数赋给左边操作数</td><td align="center">C=A+B,将A+B的值赋给C</td></tr><tr><td align="center">+=</td><td align="center">加且赋值运算符,把右边操作数加上左边操作数赋给左边操作数</td><td align="center">C+=A相当于C=C+A</td></tr><tr><td align="center">-=</td><td align="center">减且赋值运算符,把右边操作数减去左边操作数赋给左边操作数</td><td align="center">C-=A相当于C=C-A</td></tr><tr><td align="center">*=</td><td align="center">乘且赋值运算符,把右边操作数乘左边操作数赋给左边操作数</td><td align="center">C<em>=A相当于C=C</em>A</td></tr><tr><td align="center">/=</td><td align="center">除且赋值运算符,把左边操作数除以右边操作数赋给左边操作数</td><td align="center">C/=A相当于C=C/A</td></tr><tr><td align="center">%=</td><td align="center">求模且赋值运算符,求两个操作数的模赋值给左边操作数</td><td align="center">C%=A相当于C=C%A</td></tr></tbody></table><hr><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><table><thead><tr><th align="center">占位符①</th><th align="center">占位符②</th><th align="center">占位符③</th></tr></thead><tbody><tr><td align="center">%d,%i 代表十进制整数</td><td align="center">%f 代表浮点</td><td align="center">%s 代表字符串</td></tr><tr><td align="center">%c 代表char</td><td align="center">%p 代表指针</td><td align="center">%fL 代表长log</td></tr><tr><td align="center">%e 代表科学计数</td><td align="center">%g 代表小数</td><td align="center">%a,%A 代表读入一个浮点值(仅C99可用)</td></tr><tr><td align="center">%c 代表读入一个字符</td><td align="center">%u 代表无符号十进制整数</td><td align="center">% n 代表等价字符</td></tr><tr><td align="center">%o 代表八进制整数</td><td align="center">%x,%X 代表十六禁止整数</td><td align="center">%f,%F,%e,%E,%g,%G 代表实数</td></tr></tbody></table><hr><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><pre><code>栈:有效的是局部变量(在方法和语句块内部定义的变量),当方法和语句块一结束.空间马上释放.堆:存放的是成员变量(也叫属性,在方法外,在类里定义的变量),随着对象而产生,随着对象销毁而销毁.数据段:存放的是类变量(也叫静态变量,和成员变量相比多加上关键字staic),常驻内存,创建好之后不会消失.代码段:是存了程序代码的数据,在代码段中,也有可能包含一些只读的常数变量,例如字符串常量等.</code></pre><hr><p><img src="https://www.xmubshw.com/down/xdh/duihezhan.jpg" alt="堆和栈"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本操作学习笔记</title>
      <link href="/2019/12/24/linux-ji-ben-cao-zuo-xue-xi-bi-ji/"/>
      <url>/2019/12/24/linux-ji-ben-cao-zuo-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别:"></a>运行级别:</h2><table><thead><tr><th align="center">命令模式</th></tr></thead><tbody><tr><td align="center">级别0:系统停机状态,系统默认不能设置为0,否则不能正常启动</td></tr><tr><td align="center">级别1:单用户工作状态,root权限用于系统维护,禁止远程登录</td></tr><tr><td align="center">级别2:多用户状态(没有NFS)</td></tr><tr><td align="center">级别3:完全的多用户状态,(有NFS),登录后进入控制台命令行模式</td></tr><tr><td align="center">级别4:系统未使用,保留</td></tr><tr><td align="center">级别5:X11控制台,登陆后进入图形GUI模式</td></tr><tr><td align="center">级别6:系统正常关闭并重启,默认不能设为6,否则不能正常启动</td></tr></tbody></table><hr><h2 id="登录方式"><a href="#登录方式" class="headerlink" title="登录方式:"></a>登录方式:</h2><table><thead><tr><th align="center">登录方式</th></tr></thead><tbody><tr><td align="center">①:命令行登录</td></tr><tr><td align="center">②:ssh登录</td></tr><tr><td align="center">③:图形界面登录</td></tr></tbody></table><hr><h3 id="切换"><a href="#切换" class="headerlink" title="切换:"></a>切换:</h3><table><thead><tr><th align="center">切换方式</th></tr></thead><tbody><tr><td align="center">Ctrl+Alt+F1-F6切换界面</td></tr><tr><td align="center">Ctrl+Alt+F1返回图形界面</td></tr></tbody></table><hr><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作:"></a>常用操作:</h2><h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录:"></a>安装目录:</h3><p>软件安装目录一般为:</p><pre><code>/usr/local/新建一个文件夹</code></pre><p>相对路径:从当前路径,不写根;<br>例:</p><pre><code>cd usr/</code></pre><p>绝对路径:从根开始;<br>例:</p><pre><code>cd /usr/</code></pre><hr><h3 id="用户"><a href="#用户" class="headerlink" title="用户:"></a>用户:</h3><table><thead><tr><th align="center">超级用户</th><th align="center">普通用户</th></tr></thead><tbody><tr><td align="center">#</td><td align="center">$</td></tr></tbody></table><hr><h3 id="关机重启正确步骤"><a href="#关机重启正确步骤" class="headerlink" title="关机重启正确步骤:"></a>关机重启正确步骤:</h3><p>步骤①:先执行数据同步</p><pre><code>sync</code></pre><p>步骤②:关机正确命令</p><pre><code>shutdown -h now</code></pre><p>步骤③:重启正确命令</p><pre><code>shutdown -r now</code></pre><hr><h3 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接:"></a>硬链接与软链接:</h3><h4 id="硬链接-不常用"><a href="#硬链接-不常用" class="headerlink" title="硬链接(不常用):"></a>硬链接(不常用):</h4><pre><code>源文件和硬链接拥有相同的Inode号和Black块,可以看成同一个文件,如果修改任意一个文件,另一个内容都可以改变;删除任意一个文件,另一个都可以正常使用,除非两个都删除.</code></pre><pre><code>缺点:硬链接不能跨分区,不能链接目录.</code></pre><pre><code>ln /root/abc /tmp/abc-h</code></pre><h4 id="软链接-常用"><a href="#软链接-常用" class="headerlink" title="软链接(常用):"></a>软链接(常用):</h4><pre><code>软链接有自己独立的Inode号和Block块,但是Block块不记录,只写入源文件的文件名和Inode号,不论源文件多大,软链接大小不变.软链接是最大权限777,但是访问还是要受源文件权限限制;修改任意一个文件,另一个都可以改变;删除软链接,源文件不变;但是删除源文件,软链接无法访问;软链接可以跨分区,可以链接目录,特征明显.</code></pre><pre><code>ln -s 源文件 目标文件(文件名都必须写绝对路径)</code></pre><hr><h3 id="权限"><a href="#权限" class="headerlink" title="权限:"></a>权限:</h3><table><thead><tr><th align="center">文件权限</th></tr></thead><tbody><tr><td align="center">所有者</td></tr><tr><td align="center">所属组</td></tr><tr><td align="center">其他人</td></tr></tbody></table><hr><table><thead><tr><th align="center">文件权限</th></tr></thead><tbody><tr><td align="center">‘r’:读,数字代表为4</td></tr><tr><td align="center">‘w’:写,数字代表为2</td></tr><tr><td align="center">‘x’:执行,数字代表为1</td></tr></tbody></table><hr><table><thead><tr><th align="center">常用文件权限</th></tr></thead><tbody><tr><td align="center">‘644’:代表所有者是读,写权限,而所属组和其他人是只读权限</td></tr><tr><td align="center">‘755’:代表所有者是读,写,执行权限,所属组和其他人是读和执行权限(最常用权限)</td></tr><tr><td align="center">‘777’:最大权限,在实际的生产服务器中,要尽力避免赋予这样的权限</td></tr></tbody></table><hr><pre><code>注:目录最大权限不是执行权限,而是写权限,因为目录不能被执行,文件的最大权限是执行权限.</code></pre><hr><table><thead><tr><th align="center">本地访问</th><th align="center">网络访问</th></tr></thead><tbody><tr><td align="center">本地权限生效</td><td align="center">网络权限和本地权限同时生效</td></tr></tbody></table><hr><h4 id="权限第一位代表方式"><a href="#权限第一位代表方式" class="headerlink" title="权限第一位代表方式:"></a>权限第一位代表方式:</h4><table><thead><tr><th align="center">权限第一位表示</th><th align="center">权限第一位表示</th></tr></thead><tbody><tr><td align="center">‘-‘:普通文件</td><td align="center">‘b’:块设备文件,存储设备文件,如硬盘,光盘,U盘等</td></tr><tr><td align="center">‘c’:字符设备文件,输入设备文件,如鼠标,键盘等</td><td align="center">‘d’:目录文件</td></tr><tr><td align="center">‘p’:管道符文件</td><td align="center">‘c’:软链接文件</td></tr></tbody></table><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h2><pre><code>ll -ha 长格式显示所有文件ll -hd 查看目录本身ll -hi 查看Inode节点号cd ~ 进入当前用户家目录cd - 进入上次目录cd .. 进入上一级目录cd . 进入当前目录rm -rf 文件名或目录名 递归强制删除文件或目录rm -rf /目录/* 删除目录里的任意内容tree 目录树安装tree命令:sudo apt-get install treetouch 文件名 创建文件注:如果文件存在,则修改文件时间为当前时间,如果文件不存在,则创建这个文件touch -d "20xx-xx-xx xx:xx:xx" 文件名 修改文件时间cat 文件名 查看文件内容(从头到尾,有极限)more 文件名 查看文件内容(按百分比,可查看全部)head -行数 文件名 查看文件前n行tail -行数 文件名 查看文件后n行监听文件实时改动:tail -f 文件名cp 文件名 目录 复制文件到目录例:cp abc /tmp/ 把abc文件复制到tmp目录里cp -r 123 /tmp 把123这个目录复制到tmp目录里注:'-r'代表目录,此时复制的文件跟源文件不一样(包括时间,Inode节点号)cp -a abc /tmp/bcd 把abc复制到tmp目录里并改名为bcd注:这种方法复制的文件跟源文件一样(包括时间,Inode节点号)mv 123 /tmp/ 把123文件剪切进tmp目录里注:mv不用加参数别名:aliasalias ser='service network restart' 命名快捷命令'ser',并链接到'service network restart'命令上,此时命令为临时生效,重启后失效注:如需永久生效,可把上方命令加进root目录下的'.bashrc'文件内注:root里,只对当前用户生效,如需所有用户生效,可把上方命令放入etc目录下文件内df -h 查询分区使用情况chmod 权限 文件名例:chmod 755 abcuseradd 用户名 建立新用户注:建立完用户后,应立即使用'passwd'命令修改新用户密码.否则用户不能登录usermod -l 新用户名 旧用户名 修改用户名groupadd 组名 新建用户组groupmod -n 新组名 旧组名 修改组名chown 所有者 文件名 更改文件所有者chown 所有者:所属组 文件名 既更改文件所有者,又更改文件所属组把用户加进另一个组(常用):usermod -a -G 组名 用户名id -gn 显示组idid 显示id搜索:1.locate    优点:占用资源少,按数据库查找    updatedb 此命令强制更新数据库(在locate命令搜索不到的时候用)例:locate abc2.find    此命令通过查找全盘来进行例:find / -name abc 从根目录开始查找abc文件3.grep    此命令按字符串进行查找例:grep "123" abc 从abc里搜索带有123字符的数据</code></pre><hr><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符:"></a>通配符:</h3><table><thead><tr><th align="center">通配符</th></tr></thead><tbody><tr><td align="center">‘*’:任意内容</td></tr><tr><td align="center">‘?’:任意一个内容(一定要有一个才可以)</td></tr><tr><td align="center">‘[]’:中括号内任意一个内容</td></tr></tbody></table><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式:"></a>正则表达式:</h3><pre><code>'*':前一个字符重复任意多次;'?':前一个字符重复0次或1次;例:egrep "a1?2" abc 在abc文件中查找a 1个1,a 没有1;'[]':中括号内任意一个内容;'^':行首;例:egrep "^123" abc 在abc文件中查找123开头的字符;'$':行尾;例:egrep "123$" abc 在abc文件中查找123结尾的字符;</code></pre><hr><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符:"></a>管道符:</h3><pre><code>'|'例:ll /etc/ | grep abc 从etc目录下搜索abc所有例:netstat -tuln | grep 80 查看运行端口80的服务</code></pre><hr><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩:"></a>压缩:</h3><pre><code>tar -zcvf 文件名.tar.gz 需要压缩文件的路径</code></pre><hr><h3 id="解压"><a href="#解压" class="headerlink" title="解压:"></a>解压:</h3><pre><code>tar -zxvf 压缩包名</code></pre><h4 id="解压到指定位置"><a href="#解压到指定位置" class="headerlink" title="解压到指定位置:"></a>解压到指定位置:</h4><pre><code>tar -zxvf 压缩包名 -C 解压路径</code></pre><h4 id="只查看不解压"><a href="#只查看不解压" class="headerlink" title="只查看不解压:"></a>只查看不解压:</h4><pre><code>tar -ztvf 压缩包名注:'t'为测试意思</code></pre><hr><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载:"></a>挂载:</h3><pre><code>fdisk -l 查看分区列表mount 查询挂载了哪些设备mount 设备名 挂载点例:mount /dev/sdc1/ /mnt/usb/把dev目录下的sdc1硬件挂载进mnt目录下的usb挂载点内</code></pre><h4 id="卸载挂载"><a href="#卸载挂载" class="headerlink" title="卸载挂载"></a>卸载挂载</h4><pre><code>umount /mnt/usb/</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim基本命令学习笔记</title>
      <link href="/2019/12/24/vim-ji-ben-ming-ling-xue-xi-bi-ji/"/>
      <url>/2019/12/24/vim-ji-ben-ming-ling-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><pre><code>Vim是从Vi发展出来的一个文件编辑器</code></pre><hr><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式:"></a>三种模式:</h2><table><thead><tr><th align="center">命令模式</th><th align="center">输入模式</th><th align="center">底线命令模式</th></tr></thead><tbody><tr><td align="center">此状态下敲击键盘会被Vim识别为命令,而非代码</td><td align="center">命令模式下按I进入输入模式</td><td align="center">命令模式下按:(英文冒号)进入底线命令模式</td></tr></tbody></table><hr><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标:"></a>移动光标:</h2><pre><code>h:左移;j:下移;k:上移;l:右移如:向下移十行:10j;向上移十行:10k;向下移一页:pgDn;向上移一页:pgUp;向下移半页:Ctrl+d;向上移半页:Ctrl+u;移动到本行首字符:Home;移动到本行尾字符:End;移动到最上方一行(当前屏幕):H;移动到最中间一行(当前屏幕):M;移动到最后一行(当前屏幕):L;移动到最上方一行(全部代码最上方):gg;移动到最下方一行(全部代码最下方):G;向下移动n行:n&lt;Enter&gt;(回车键);或nG;</code></pre><hr><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换:"></a>搜索替换:</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索:"></a>搜索:</h3><pre><code>向光标之下查询:/需要查询的字符;向下重复查询:n;向光标之上查询:?需要查询的字符;向上重复查询:N;</code></pre><h3 id="替换"><a href="#替换" class="headerlink" title="替换:"></a>替换:</h3><pre><code>替换当前行:':s/需要替换的字符/替换的字符/g'替换多行:':n1,n2s/需要替换的字符/替换的字符/g'例:在5-10行里查找到Word,并替换为Excal:5,10/Word/Excal/g从第1行到最后一行里查找到Word,并替换为Excal:1,$s/Word/Excal/g</code></pre><hr><h2 id="删除及复制以及粘贴"><a href="#删除及复制以及粘贴" class="headerlink" title="删除及复制以及粘贴:"></a>删除及复制以及粘贴:</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除:"></a>删除:</h3><pre><code>向后删除一个字符:x;向前删除一个字符:X;连续向后删除n个字符:nx;删除光标所在一行:dd;删除光标下n行:ndd;删除光标到本行最后一个字符:d$;重复删除:c;例:向下删除10行:10cj;向上删除10行:10ck;</code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制:"></a>复制:</h3><pre><code>复制光标一行:yy;复制光标下n行:nyy;</code></pre><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴:"></a>粘贴:</h3><pre><code>粘贴复制的数据到光标下一行:p;粘贴复制的数据到光标上一行:P;</code></pre><hr><h2 id="合并"><a href="#合并" class="headerlink" title="合并:"></a>合并:</h2><pre><code>合并行:n1,n2 j例:合并2-5行:2,5 j</code></pre><hr><h2 id="编辑按钮"><a href="#编辑按钮" class="headerlink" title="编辑按钮:"></a>编辑按钮:</h2><table><thead><tr><th align="center">编辑按钮①</th><th align="center">编辑按钮②</th></tr></thead><tbody><tr><td align="center">i:从当前光标插入</td><td align="center">I:从当前行的第一个字符开始插入(行首插入)</td></tr><tr><td align="center">a:从光标所在的下一个字符插入</td><td align="center">A:从当前所在行的最后一个字符开始插入(行尾插入)</td></tr><tr><td align="center">o:从光标所在的下一行插入新的一行</td><td align="center">O:从光标所在的上一行插入新的一行</td></tr></tbody></table><hr><h2 id="存储和离开"><a href="#存储和离开" class="headerlink" title="存储和离开:"></a>存储和离开:</h2><pre><code>写入不退出:':w';离开:':q';存储离开:':wq';强制:'!'</code></pre><hr><h2 id="行号"><a href="#行号" class="headerlink" title="行号:"></a>行号:</h2><pre><code>开启行号:set nu取消行号:set nonu</code></pre><hr><h2 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠:"></a>代码折叠:</h2><pre><code>打开折叠:zR;关闭折叠:zM;删除折叠:zE;例:折叠5-10行代码:zf10G</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本命令学习笔记</title>
      <link href="/2019/12/24/git-ji-ben-ming-ling-xue-xi-bi-ji/"/>
      <url>/2019/12/24/git-ji-ben-ming-ling-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><pre><code>分布式版本控制系统</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h2><h3 id="在-Linux-上安装"><a href="#在-Linux-上安装" class="headerlink" title="在 Linux 上安装:"></a>在 Linux 上安装:</h3><p>如果你想在 Linux 上用二进制安装程序来安装 Git，可以使用发行版包含的基础软件包管理工具来安装。</p><pre><code>$ sudo yum install git</code></pre><p>如果你在基于 Debian 的发行版上，请尝试用 apt-get：</p><pre><code>$ sudo apt-get install git</code></pre><hr><h2 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h2><p>创建空目录:</p><pre><code>mkdir 目录名</code></pre><p>打开目录:</p><pre><code>cd 目录名</code></pre><p>把目录变成Git可管理的仓库:</p><pre><code>git init</code></pre><p>提交用户名:</p><pre><code>$ git config --global user.name "用户名"</code></pre><p>提交邮箱:</p><pre><code>$ git config --global user.email "邮箱"</code></pre><p>建立本机SSH协议秘钥:</p><pre><code>ssh-keygen -t rsa -C '邮箱'</code></pre><p>建立与远程库的链接(建议用ssh协议):</p><pre><code>git remote add 需要设置的库名 远程库的链接</code></pre><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h2><h3 id="将文件提交到暂存区"><a href="#将文件提交到暂存区" class="headerlink" title="将文件提交到暂存区:"></a>将文件提交到暂存区:</h3><pre><code>git add 文件名</code></pre><hr><h3 id="将暂存区文件提交到本地版本库"><a href="#将暂存区文件提交到本地版本库" class="headerlink" title="将暂存区文件提交到本地版本库:"></a>将暂存区文件提交到本地版本库:</h3><pre><code>git commit -m "说明"</code></pre><hr><h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态:"></a>查看工作区状态:</h3><pre><code>git status</code></pre><hr><h3 id="回退"><a href="#回退" class="headerlink" title="回退:"></a>回退:</h3><pre><code>git checkout --hard HEAD^</code></pre><p>此处(HEAD^为上个版本,可换为版本ID号)</p><h4 id="将暂存区还未提交的改动撤销"><a href="#将暂存区还未提交的改动撤销" class="headerlink" title="将暂存区还未提交的改动撤销:"></a>将暂存区还未提交的改动撤销:</h4><pre><code>git reset HEAD 文件名</code></pre><h4 id="将提交到版本库里的文件替换回暂存区-参考版本回退"><a href="#将提交到版本库里的文件替换回暂存区-参考版本回退" class="headerlink" title="将提交到版本库里的文件替换回暂存区(参考版本回退):"></a>将提交到版本库里的文件替换回暂存区(参考版本回退):</h4><pre><code>git checkout -- 文件名</code></pre><hr><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史:"></a>查看提交历史:</h3><pre><code>git reflog</code></pre><hr><h3 id="丢弃工作区"><a href="#丢弃工作区" class="headerlink" title="丢弃工作区:"></a>丢弃工作区:</h3><pre><code>git checkout -- 文件名</code></pre><hr><h3 id="删除"><a href="#删除" class="headerlink" title="删除:"></a>删除:</h3><h4 id="步骤①"><a href="#步骤①" class="headerlink" title="步骤①:"></a>步骤①:</h4><pre><code>rm 文件名</code></pre><h4 id="步骤②"><a href="#步骤②" class="headerlink" title="步骤②:"></a>步骤②:</h4><pre><code>git rm 文件名</code></pre><h4 id="步骤③"><a href="#步骤③" class="headerlink" title="步骤③:"></a>步骤③:</h4><pre><code>git commit -m "说明"</code></pre><hr><h3 id="误删除一个文件-恢复操作"><a href="#误删除一个文件-恢复操作" class="headerlink" title="误删除一个文件,恢复操作:"></a>误删除一个文件,恢复操作:</h3><pre><code>git reset HEAD 文件名</code></pre><p>或者</p><pre><code>git checkout -- 文件名</code></pre><hr><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作:"></a>分支操作:</h3><h4 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支:"></a>创建并切换分支:</h4><pre><code>git checkout -b 分支名</code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支:"></a>切换分支:</h4><pre><code>git checkout 分支名</code></pre><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支:"></a>查看分支:</h4><pre><code>git branch</code></pre><h5 id="查看远程分支-此命令实际是查看所有分支"><a href="#查看远程分支-此命令实际是查看所有分支" class="headerlink" title="查看远程分支(此命令实际是查看所有分支):"></a>查看远程分支(此命令实际是查看所有分支):</h5><pre><code>git branch -a</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支:"></a>删除分支:</h4><pre><code>git branch -d 分支名</code></pre><h5 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支:"></a>删除远程分支:</h5><pre><code>git push -d 库名 分支名</code></pre><h4 id="修改分支名称"><a href="#修改分支名称" class="headerlink" title="修改分支名称:"></a>修改分支名称:</h4><h5 id="修改本地分支名称"><a href="#修改本地分支名称" class="headerlink" title="修改本地分支名称:"></a>修改本地分支名称:</h5><pre><code>git branch -m 当前分支名 需要修改的分支名</code></pre><h5 id="修改远程分支名称"><a href="#修改远程分支名称" class="headerlink" title="修改远程分支名称:"></a>修改远程分支名称:</h5><pre><code>第一步:先删除远程分支第二步:更改本地分支名第三步:上传本地分支到远程库</code></pre><h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支:"></a>合并某分支到当前分支:</h4><pre><code>git merge 分支名</code></pre><p>也可用’rebase’变基操作.</p><h4 id="查看分支合并情况"><a href="#查看分支合并情况" class="headerlink" title="查看分支合并情况:"></a>查看分支合并情况:</h4><pre><code>git log --graph</code></pre><h4 id="隐藏工作区"><a href="#隐藏工作区" class="headerlink" title="隐藏工作区:"></a>隐藏工作区:</h4><pre><code>git stash</code></pre><h4 id="显示工作区"><a href="#显示工作区" class="headerlink" title="显示工作区:"></a>显示工作区:</h4><pre><code>git stash list</code></pre><h4 id="恢复工作区"><a href="#恢复工作区" class="headerlink" title="恢复工作区:"></a>恢复工作区:</h4><pre><code>git stash pop</code></pre><h4 id="恢复工作区后复制一个特定的提交到当前分支"><a href="#恢复工作区后复制一个特定的提交到当前分支" class="headerlink" title="恢复工作区后复制一个特定的提交到当前分支:"></a>恢复工作区后复制一个特定的提交到当前分支:</h4><pre><code>git cherry-pick 版本ID号</code></pre><hr><h3 id="抓取和提交以及克隆"><a href="#抓取和提交以及克隆" class="headerlink" title="抓取和提交以及克隆:"></a>抓取和提交以及克隆:</h3><h4 id="抓取"><a href="#抓取" class="headerlink" title="抓取:"></a>抓取:</h4><pre><code>git pull 库名 分支名</code></pre><p>每次抓取完成后都要对比信息是否正确:</p><pre><code>git diff</code></pre><h4 id="提交"><a href="#提交" class="headerlink" title="提交:"></a>提交:</h4><h5 id="向远程推送分支内容"><a href="#向远程推送分支内容" class="headerlink" title="向远程推送分支内容:"></a>向远程推送分支内容:</h5><pre><code>git push 库名 分支名</code></pre><h5 id="推送本地分支到远程分支"><a href="#推送本地分支到远程分支" class="headerlink" title="推送本地分支到远程分支:"></a>推送本地分支到远程分支:</h5><pre><code>git push 库名 本地分支名:远程分支名</code></pre><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆:"></a>克隆:</h4><pre><code>git clone git链接</code></pre><h4 id="远程库"><a href="#远程库" class="headerlink" title="远程库:"></a>远程库:</h4><h5 id="查看远程库"><a href="#查看远程库" class="headerlink" title="查看远程库:"></a>查看远程库:</h5><pre><code>git remote -v</code></pre><h5 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库:"></a>删除远程库:</h5><pre><code>git remote rm 库名</code></pre><hr><h3 id="标签"><a href="#标签" class="headerlink" title="标签:"></a>标签:</h3><h4 id="如何打标签"><a href="#如何打标签" class="headerlink" title="如何打标签:"></a>如何打标签:</h4><p>先切换到需要打标签的分支上;</p><pre><code>git checkout 分支名</code></pre><p>打标签:</p><pre><code>git tag 标签内容</code></pre><p>给历史内容打标签:</p><pre><code>git log 标签内容 ID号</code></pre><p>创建有说明的标签:</p><pre><code>git tag -a 标签内容 -m "说明" ID号</code></pre><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签:"></a>查看标签:</h4><pre><code>git tag</code></pre><h4 id="查看标签说明"><a href="#查看标签说明" class="headerlink" title="查看标签说明:"></a>查看标签说明:</h4><pre><code>git show 标签名</code></pre><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签:"></a>删除标签:</h4><pre><code>git tag -d 标签名</code></pre><h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签:"></a>推送标签:</h4><pre><code>git push 库名 标签名</code></pre><h5 id="一次性推送未推送到远程的标签"><a href="#一次性推送未推送到远程的标签" class="headerlink" title="一次性推送未推送到远程的标签:"></a>一次性推送未推送到远程的标签:</h5><pre><code>git push 库名 --tags</code></pre><h4 id="远程删除标签"><a href="#远程删除标签" class="headerlink" title="远程删除标签"></a>远程删除标签</h4><p>第一步:必须先删除本地标签;</p><pre><code>git tag -d 标签名</code></pre><p>第二步:再删除远程标签;</p><pre><code>git push 库名 :refs/tags/标签名</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习笔记</title>
      <link href="/2019/12/23/markdown-xue-xi-bi-ji/"/>
      <url>/2019/12/23/markdown-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><pre><code>轻量级标记语言.理解:比如Html需写120个字符,但用MarkDown只需要写30字符.用途:主要用于写项目文档.</code></pre><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题:"></a>标题:</h2><table><thead><tr><th align="center">一级标题</th><th align="center">二级标题</th></tr></thead><tbody><tr><td align="center">======</td><td align="center">——</td></tr></tbody></table><hr><h3 id="多种写法"><a href="#多种写法" class="headerlink" title="多种写法:"></a>多种写法:</h3><table><thead><tr><th align="center">一级标题</th><th align="center">二级标题</th><th align="center">三级标题</th><th align="center">四级标题</th><th align="center">五级标题</th><th align="center">六级标题</th></tr></thead><tbody><tr><td align="center">#</td><td align="center">##</td><td align="center">###</td><td align="center">####</td><td align="center">#####</td><td align="center">######</td></tr></tbody></table><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体:"></a>字体:</h2><h3 id="三种字体写法"><a href="#三种字体写法" class="headerlink" title="三种字体写法:"></a>三种字体写法:</h3><table><thead><tr><th align="center">斜体</th><th align="center">粗体</th><th align="center">粗斜体</th></tr></thead><tbody><tr><td align="center">* 斜体 *</td><td align="center">** 粗体 **</td><td align="center"><strong>*  粗斜体  *</strong></td></tr><tr><td align="center">_ 斜体 _</td><td align="center">__ 粗体 __</td><td align="center"><strong>_ 粗斜体 _</strong></td></tr></tbody></table><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线:"></a>分割线:</h2><pre><code>可用三个以上的星号(*)或者减号(-)或者下划线(_)来建立分割线;</code></pre><table><thead><tr><th align="center">第一种</th><th align="center">第二种</th><th align="center">第三种</th></tr></thead><tbody><tr><td align="center">***</td><td align="center">—</td><td align="center">___</td></tr></tbody></table><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线:"></a>删除线:</h2><pre><code>文字两端加两个波浪线;~~MarkDown~~</code></pre><h3 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h3><p><del>MarkDown</del></p><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线:"></a>下划线:</h2><pre><code>不可直接表示,需借用Html标签&lt;u&gt;&lt;/u&gt;表示.&lt;u&gt;MarkDown&lt;/u&gt;</code></pre><h3 id="例-1"><a href="#例-1" class="headerlink" title="例:"></a>例:</h3><p><u>MarkDown</u></p><hr><h2 id="角标"><a href="#角标" class="headerlink" title="角标:"></a>角标:</h2><pre><code>小茗Ub生活网[^小茗Ub生活网]</code></pre><h3 id="例-2"><a href="#例-2" class="headerlink" title="例:"></a>例:</h3><p>小茗Ub生活网[^小茗Ub生活网]</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表:"></a>列表:</h2><table><thead><tr><th align="center">有序列表</th><th align="center">无序列表</th></tr></thead><tbody><tr><td align="center">1.第一项</td><td align="center">* 第一项</td></tr><tr><td align="center">2.第二项</td><td align="center">* 第二项</td></tr><tr><td align="center">3.第三项</td><td align="center">* 第三项</td></tr></tbody></table><h3 id="例-3"><a href="#例-3" class="headerlink" title="例:"></a>例:</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表:"></a>有序列表:</h4><p>1.第一项</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表:"></a>无序列表:</h4><ul><li>第一项</li></ul><hr><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套:"></a>列表嵌套:</h2><table><thead><tr><th align="center">有序列表</th></tr></thead><tbody><tr><td align="center">1.第一项(此项后加四个空格,即为列表嵌套) * 嵌套第一项</td></tr><tr><td align="center">2.第二项(此项后加四个空格,即为列表嵌套) - 嵌套第二项</td></tr><tr><td align="center">3.第三项(此项后加四个空格,即为列表嵌套) - 嵌套第三项</td></tr></tbody></table><h3 id="例-4"><a href="#例-4" class="headerlink" title="例:"></a>例:</h3><p>1.第一项</p><ul><li>嵌套第一项</li></ul><hr><h2 id="区块"><a href="#区块" class="headerlink" title="区块:"></a>区块:</h2><pre><code>&gt; 最外层&gt; &gt; 第一层&gt; &gt; &gt; 第二层&gt; &gt; &gt; &gt; 第三层</code></pre><h3 id="例-5"><a href="#例-5" class="headerlink" title="例:"></a>例:</h3><blockquote><p>最外层</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote></blockquote><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><pre><code>需用''括起来.</code></pre><hr><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块:"></a>代码区块:</h2><pre><code>需用上下三个```符号把代码包起来</code></pre><h3 id="例-6"><a href="#例-6" class="headerlink" title="例:"></a>例:</h3><pre><code>&lt;u&gt;&lt;/u&gt;</code></pre><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接:"></a>链接:</h2><table><thead><tr><th align="center">链接①</th><th align="center">链接②</th></tr></thead><tbody><tr><td align="center"><a href="链接">名称</a></td><td align="center">&lt;链接&gt;</td></tr></tbody></table><p>链接③:</p><pre><code>[名称][随便给一个值][值]:链接</code></pre><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片:"></a>图片:</h2><pre><code>![给一个值](图片地址)</code></pre><h3 id="例-7"><a href="#例-7" class="headerlink" title="例:"></a>例:</h3><p><img src="https://www.xmubshw.com/down/logo.png" alt="xm"></p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格:"></a>表格:</h2><pre><code>|左|中|右||:-|:-:|-:||左|中|右|</code></pre><h3 id="例-因为浏览器兼容问题-可能表格样式会显示不全-但书写格式是标准的"><a href="#例-因为浏览器兼容问题-可能表格样式会显示不全-但书写格式是标准的" class="headerlink" title="例(因为浏览器兼容问题,可能表格样式会显示不全,但书写格式是标准的):"></a>例(因为浏览器兼容问题,可能表格样式会显示不全,但书写格式是标准的):</h3><table><thead><tr><th align="left">左</th><th align="center">中</th><th align="right">右</th></tr></thead><tbody><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr></tbody></table><hr><h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标:"></a>上标和下标:</h2><pre><code>可用Html标签&lt;sup&gt;文字&lt;/sup&gt;为上标&lt;sub&gt;文字&lt;/sub&gt;为下标</code></pre><h3 id="例-8"><a href="#例-8" class="headerlink" title="例:"></a>例:</h3><table><thead><tr><th align="center">上标</th><th align="center">下标</th></tr></thead><tbody><tr><td align="center">益达<sup>Tm</sup></td><td align="center">Ho<sub>2</sub></td></tr></tbody></table><hr><h2 id="正常显示普通符号"><a href="#正常显示普通符号" class="headerlink" title="正常显示普通符号:"></a>正常显示普通符号:</h2><pre><code>使用反斜杠(\)转义特殊字符\* 正常显示星号(*) \*</code></pre><h3 id="例-9"><a href="#例-9" class="headerlink" title="例:"></a>例:</h3><p>* 正常显示星号 *</p><hr><h2 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录:"></a>自动生成目录:</h2><pre><code>使用[toc],放在MarkDown文档最上方,会自动生成目录</code></pre><hr><h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号:"></a>常用符号:</h2><table><thead><tr><th align="center">常用符号①</th><th align="center">常用符号②</th><th align="center">常用符号③</th></tr></thead><tbody><tr><td align="center">(反斜杠)</td><td align="center">`(反引号)</td><td align="center">*(星号)</td></tr><tr><td align="center">_(下划线)</td><td align="center">{}(花括号)</td><td align="center">[] (方括号)</td></tr><tr><td align="center">()(小括号)</td><td align="center">#(#号)</td><td align="center">+(加号)</td></tr><tr><td align="center">-(减号)</td><td align="center">.(英文句号)</td><td align="center">!(感叹号)</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
